package co.datainsider.jobworker.service.handlers

import co.datainsider.jobworker.domain.JobStatus
import co.datainsider.jobworker.domain.job.MongoJob
import co.datainsider.jobworker.domain.source.MongoSource
import co.datainsider.jobworker.service.handler.SourceMetadataHandler
import co.datainsider.bi.util.ZConfig
import com.twitter.inject.Test
import com.twitter.util.Await

class MongoHandlerTest extends Test {

  val host: String = ZConfig.getString("test_db.mongodb.host")
  val port: Int = ZConfig.getInt("test_db.mongodb.port")
  val username: String = ZConfig.getString("test_db.mongodb.username")
  val password: String = ZConfig.getString("test_db.mongodb.password")

  val dataSource: MongoSource = MongoSource(
    orgId = 1L,
    id = 1,
    displayName = "test",
    host = host,
    port = Option(port.toString),
    username = username,
    password = password,
    tlsConfiguration = None,
    connectionUri = None
  )
  val sourceHandler: SourceMetadataHandler = SourceMetadataHandler(dataSource)

  test("mongodb test connection") {
    val connected = Await.result(sourceHandler.testConnection())
    assert(connected)
  }

  test("mongodb list db") {
    val dbs: Seq[String] = Await.result(sourceHandler.listDatabases())
    assert(dbs.nonEmpty)
    assert(dbs.contains("admin"))
    println(dbs.mkString(", "))
  }

  test("mongodb list tbl") {
    val tables: Seq[String] = Await.result(sourceHandler.listTables("highschool"))
//    assert(tables.contains("student"))
  }
//
//  test("mongodb suggest table schema") {
//    val job: MongoJob = MongoJob(
//      1,
//      jobId = 2,
//      sourceId = 0L,
//      lastSuccessfulSync = 0L,
//      syncIntervalInMn = 0,
//      lastSyncStatus = JobStatus.Init,
//      currentSyncStatus = JobStatus.Queued,
//      displayName = "test",
//      destDatabaseName = "test",
//      destTableName = "test",
//      databaseName = "highschool",
//      tableName = "student",
//      incrementalColumn = None,
//      lastSyncedValue = "0",
//      maxFetchSize = 1000,
//      flattenDepth = 0
//    )
//    val connected = Await.result(sourceHandler.testJob(job))
//    assert(connected)
//  }

//  test("test mongodb connection") {
//    val certificateFileData = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUV4VENDQTYyZ0F3SUJBZ0lVTXNSY0JYeVAyTDdwUkV1T1FFWjdCWXk4dW84d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lERVFNQTRHQTFVRUF3d0hiVzl1WjI5a1lqRU5NQXNHQTFVRUN3d0VWR1ZqYURFT01Bd0dBMVVFQ2d3RgpVMlZzYkhreER6QU5CZ05WQkFjTUJrUmhUbUZ1WnpFUE1BMEdBMVVFQ0F3R1JHRk9ZVzVuTVFzd0NRWURWUVFHCkV3SldUakFlRncweU1qQTBNREV3TXpFeE16RmFGdzB5TXpBME1ERXdNekV4TXpGYU1IRXhGREFTQmdOVkJBTU0KQzJSaGRHRnBibk5wWkdWeU1SUXdFZ1lEVlFRTERBdEVZWFJoU1c1emFXUmxjakVVTUJJR0ExVUVDZ3dMUkdGMApZVWx1YzJsa1pYSXhEekFOQmdOVkJBY01Ca1JoVG1GdVp6RVBNQTBHQTFVRUNBd0dSR0ZPWVc1bk1Rc3dDUVlEClZRUUdFd0pXVGpDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBT09wSWo3dzJqQ04Kd3NSY0duWUNCaGFtTlpvR0l3MmJleTZvL2Rua0JQYkhhbzR4OFJxMkQ2N2MwK2RlUDkwcEc0amlNQmJTTkhKRAp5YWZFSUplVWk1azFaS3A4a3BXV0ozanNra28wcEg2dnFZNVo4UElwNUVJbUJ4L0ptMEhmNTA1b0tGSTJuTURXCk5OVFdvMS9kNTlUZGNPaE5rTGtKU3g1YTRMbTNkcHE5WFlISU05NVQrSFJMVmovVE50cmZYeVQvLzA5bWxJclAKeFk3aFJyblBoMC8xOVBnNW1JRUc4dHNyVkVXRWYycXBiNzJwK2FGakxzeVpSbVlBT283SHZacUVDR3VqOXVHNQo5VzZyLzFGektVc3k5cVNpZHFwbTM3KzIwbm92ZGEzQkpVcnpmYWYyMmxHd1ZiU3ZCZDd4b05lM0dGTXErTFh6CkM1RVlBTVZ0dE9wenk2ODE0Yk15N1VOUTl2QXp1YXZTdFNUY01HQVpKZzhURWtZZkhOTlFCelNKbmJYdGp5cXUKUms3MmE2Y3NlNW1ldDd3OVFSdUIramhZbFl2cEl6UlBIQ2Y4azA0Rk1jLzhNMk0zanFzdG1jdis2MHF6ZTRObwpwb1lWTmZWZi9KRlRLRkloY2dkSlVEV1c5YWtjMVhVYktkYU1rN3ZNR0MzTUZOS0RndnNDY0hKNXNLRjlVOTJFCjZ0b3hkUTgwelViaHpXMlVVYkY4SWNIanJ0ekN4bWdTNGdoQmRjSTNsU01zT0d1S09mVkRXY3ovNTZmRGl6em8KZE1YRDA2SEFyOFg4YS9mODd1MnZvOFJRa0k0cVNaekxLb1BOQWtqcHo4S29HcDcxeS9qNG0zQ3doTTFJTkJ2awpxaExqZE9FUXB4ekFQYVB0RUJ5T00vOXI3emJRU25XSkFnTUJBQUdqWmpCa01HSUdBMVVkRVFSYk1GbUNDV3h2ClkyRnNhRzl6ZElJSGNISnBiV0Z5ZVlJS2MyVmpiMjVrWVhKNU1ZSUhZWEppYVhSbGNvY0Vmd0FBQVljRXJCOEcKekljRXJCOEYxb2NFckI4QlNvY0VOdjRDZzRjRUF3Q3JTb2NFTnY5U080Y0VOcGU3K3pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFUOExET3d5aGIwSm1WUk5ieHRxZmJ2ZUR5WS9xR2cxWE5iSUF6NHloOGxqU0pFY2s4N0tIClZ2dm1Pam1tTnlYTWRHb1IyK3hkZnpCcm4wd3J6YW1CazN6TkhkbXBCRi92Y3VXV3QvTW1lV1dNYndxaS9mY0IKd1ZRUVA1a1hFUkRwWXhlaXcraTZoQlVXWUxPZDdQeWNnenZicm5LN21tYzc5YXlpTDlkUklyODdYYlV5cTQrbwpRZzRMVHpLcG9YRjhyRUxDNG9PdERoZ3RETUhHaUxCR2J4TXMzRVo1R3NuZ01OSHpZSTZzSks5bzV1MmNWSkUvCkJ4am8wdmdmTnI4RDg2RW9COVhMNmp2KzJhclVkdDgrWWxBYmtOa3JKaHA4VExHdUJZWnl2RnJXMG96M2NoRCsKbVpaK3JtdCsrUkdDNnUyUkVrQ2pGVUtRTGljOTRMZldhUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRRGpxU0krOE5vd2pjTEUKWEJwMkFnWVdwaldhQmlNTm0zc3VxUDNaNUFUMngycU9NZkVhdGcrdTNOUG5Yai9kS1J1STRqQVcwalJ5UThtbgp4Q0NYbEl1Wk5XU3FmSktWbGlkNDdKSktOS1IrcjZtT1dmRHlLZVJDSmdjZnladEIzK2RPYUNoU05wekExalRVCjFxTmYzZWZVM1hEb1RaQzVDVXNlV3VDNXQzYWF2VjJCeURQZVUvaDBTMVkvMHpiYTMxOGsvLzlQWnBTS3o4V08KNFVhNXo0ZFA5ZlQ0T1ppQkJ2TGJLMVJGaEg5cXFXKzlxZm1oWXk3TW1VWm1BRHFPeDcyYWhBaHJvL2JodWZWdQpxLzlSY3lsTE12YWtvbmFxWnQrL3R0SjZMM1d0d1NWSzgzMm45dHBSc0ZXMHJ3WGU4YURYdHhoVEt2aTE4d3VSCkdBREZiYlRxYzh1dk5lR3pNdTFEVVBid003bXIwclVrM0RCZ0dTWVBFeEpHSHh6VFVBYzBpWjIxN1k4cXJrWk8KOW11bkxIdVpucmU4UFVFYmdmbzRXSldMNlNNMFR4d24vSk5PQlRIUC9ETmpONDZyTFpuTC91dEtzM3VEYUthRwpGVFgxWC95UlV5aFNJWElIU1ZBMWx2V3BITlYxR3luV2pKTzd6Qmd0ekJUU2c0TDdBbkJ5ZWJDaGZWUGRoT3JhCk1YVVBOTTFHNGMxdGxGR3hmQ0hCNDY3Y3dzWm9FdUlJUVhYQ041VWpMRGhyaWpuMVExbk0vK2VudzRzODZIVEYKdzlPaHdLL0YvR3YzL083dHI2UEVVSkNPS2ttY3l5cUR6UUpJNmMvQ3FCcWU5Y3Y0K0p0d3NJVE5TRFFiNUtvUwo0M1RoRUtjY3dEMmo3UkFjampQL2ErODIwRXAxaVFJREFRQUJBb0lDQVFDNHJ1Tk9KZnNLdW1XTy81eWpzTDZaCnJ4bjZxaEhUbnhjTjRoK1VuQXArMjRVUWQyazlId2FYOXlLY0pmUXZDSU1DeDJMMWtHN2xaeUoyeTM4WkdITXEKeFlxMVZ6dGV5Q0diVW1iV2RlQWZ1WWNXS05aeXpSTVRxbC9MSkxTamV1emN5VmcwWVlOR1dEOGhqa0dZcXA3QQpLeWZGKys1MGZScUlOSGJya2U1UVYyQTh3Vmw2ZWFvclJWWmhqb21JZ3Y1Zk9LRTRHMkpUUFh2cGpjemZQWUJxCm1IK3l3cDU1eFZaTC85bHNUN0ZCcU5ReUMycXJ4cGNYZVJ3SDhSV1A4Rzlhb3RObDV1eUhiMkN2K0MyMk9ITCsKUXdpY3hBTDU5MXg1M09qZ0lCSVo4MzY2VDg3VzdFVnRVVndscUhwZHdxeVZjajMwY2Y2ek04aGxXeEI5R0tOUwpxdm5nTFNyNFZxVFVWZkl5MURBUEhYMXhnc281eEp3ejZXZDFRMzZTUFB4SEV0WUdWd21jQXNudjlsOGJRekJUCjYrZkU0ZHZLbndnUjFZdXd3aXlnWUlVNFZCU3QvcmdlejllckorcHI1enArQXorWjJYRnZ0aDkrODNFZ3g1VFgKcnBLdTYyWUl2UWdBdWx5OHA3aWs4cXJBQ1pQdmJYL3NCNS9sNUFJYTlNZ0FWVmYrRlpIU3ZZdFUyL1VVdk0xMwoxMWZQQWtXcWZYYU5XREhpaG9jQWl0MEVpNmtXczludFByOHkxOEZFZVp2UHVtQ25WZmNRb290V1BZOERXYlh1CjlTSGplOG10UUJKdU11V3JUR2Q1ZTFTR0FhQUN3eGZnakZkcDRiTlBtR2dUNEF0UklRYlJVQmNTcFhxcHlqMlEKQmxzcFBYWFpsbmhWZUNHUnNJSHhBUUtDQVFFQTluTlZ6STNiVE9nSlRibHlEdE1sMStJaFV0anUvNEZoMDNiYgo5Y0c5TlZ5emxqU1VpYlBySXcyR0I3WTlBd1p5MzRaakFGY0dWNFhFNVBmSzY5R1h5eGRtaDR3Y3hBYkhsT0JuCmpVc1hPVWNVSWN3VEo4cHpMUDErZHc3OEhqSUJPMFdOWCtoZ2t1MmdKRUVwSDc0MHdGZlM5TFBKaU9rekZwdWIKSXlOWW5DN0dBQ3FQWnNUeFk1c050aGpUQ3NnSU5iSmVrUTNPUy95cUlTcjBvM3VVMlZWRGEwK25JcmhZb1JpZgpTbS83ZEtkR2gwcHhGZ2IxWVloa2hqRnRWT3FpVXhtMm44Mko5enY5UDJ0ZlJKNTYydXE4R2xseGtkcmNPeGdJCkN0N1dyUG1wUDVIdXRPL1JSOTdWenJmWGcveVI2OGhwRWJzMTF2NHAwUEdzajZzeElRS0NBUUVBN0h0cHJVMk8KblBHMHRiVklFVTdYMlpaTFRrNzZreW9nb0pmUWhMaGM0b2hrZjAwamlzclk4STdTOU1vMzFqNUx6SFhLOXcvWApWYkVwWVp3VG8yTm4zRjF0cEhGOHp0TnE4U2J0eDdKTjVsWi9Pb2lvNHJYbHFmd3UzS2h2R3dWblA3RDQ1UUx3CnlnU1ZLRXNvWktaY1ZGNlVxZm1xRG5OYVE0dllCWVAvdVN5bzN3dTRINEZnTUdiMmRab0N1cUVvWnlUazkwK0UKYmQycmZ3S0lpS1EyenYzZHhXcjA0TVRFaCtWWkgzSGJTTkxuNXFUMU1xQkpXVnl5QkNZSDUrS2YxZDRSQXRsNQpjQ1pxTUpxRG9UeHBsdTFjaktTNkpnWlhyR1NMUk9ndjlSK3BVNDBPV1ptblZabHVkQkYzTjFDcVZOSVJvWUFzCjJQU2dsVUtYUWdadmFRS0NBUUIzMFA3bm9oZjZQZDA0RW02blVuUlZqclRReUhMNWVYZU1EWDlHN2RnRk4zcUEKRGpRZzluM2MzdGhJcTRyaUM2S1JsWTVRUGY3eFVqRzFkOXNKNXk0N0tMZEtNdzVSSjFLa3lLelBmckJkd25iQgpMNndvYmo2c290bDNIS3ZxS2psN0RZZDhGMGZNWndheVdaT2F3U2g0VXJwWENZbHpySnlQNHpyN1RGWHFLTHRPCm5XSjJmazAxTmM3bXR3N3pjT2k4NG1ramNHalpmSTloN0xaZlBOZlRDYWJyWnlCRXV3Y3Iyd0ttZCtieWdkakMKTWFqbElxRHR1QmZYUGZSL2trczB4NDJJQjYrSnFYcW4rSldxa0xuOThKMWUyaGxpNWRxb1NEaXd3RUh5ZXJhVQpGMmpNUXNPbWcybkRSSkhjczFCbUoxc2RxYnkxTjRBdyt5My84eVRCQW9JQkFDQXJMWlh3amV6VmlHS0xkWEU5ClMybUM0MTJVcXN0b0dLWWY0TEtkTGExM0preVczclhib0NVaEdKdEtBc3gzRHZLU04zamlROFdaWXVxdlE1Q2YKVGhxUTd3QkdtOWE2dGJwMk5EUk5FZ0c2VkhaTzdzSmdRZ3ljakhkaHhqTmp5Y2JGT1NaVi94Rk1ERW85NXhIQgorNTlTZW1DZzRMdzBmdHZmWXhSay8xMWVNTjZlaG41cXAvNE5rNHN0MXg4eUd2L2s2ZXltZVhwRWhEYXp6b1RmCjZjREFrZkZ2K2oyMUpwTGg1UHk5RFRwYnprWDJ2SkFWYzhUZk1pd1VURkVENkFBOHhBMmlMYjNPeS9VdW42ZEkKUTRqUFl4NlNyZXZNUXhMbFhuaVNLU3ZzRWFtVzc1UEtyaE9iMm9XWmRxRWtyUGI2MklFaW9YY2wxODVXRDZOZwpvcmtDZ2dFQVN0S21xWWdNM1p0U2RxK0FUaDJFQUNUbStnSEpBZlhzTEFucHVLR1NPeTBidXVoNGpzdVJtMHRxCmRCT3VYN2h1VkpML29ITTVpbVU1OUFaQTFKcXUrUUVOTzB4S0hwZGxLczNvMFNxU3FYTlBUNzRsUDYzTnZXcVgKTS9CRU5GK2lLOTJpMzUyOXlwczNLMjBmcTNXd052QndOVExIcWQrbllRYVN2dndROGxlS1JQZGd4NGl5NExmNApUcFgzbkNWTndUOG9wd2NjOHlXQzZ4VmdVemFIcU05UWgzdHBwUkw2VUFEOFZEQ3MrZDFwL0xoRXlDbHFQVXVoCkhjTGgxRlJFclNUMXd0TDJYY2NOZ0dRSmVhK3JHSkRibHJpanBVYVk4azVldkV4T0V3UDVaWW1oeUxsSFBvcTYKM3RkcS9wVldYajZRL25IQTlaUk51dUgwVW9qQndRPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ=="
//    val caFileData = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURvVENDQW9tZ0F3SUJBZ0lVSndMUlRFQmRUVWJUQXYzNllnVExTMXg0NmFnd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lERVFNQTRHQTFVRUF3d0hiVzl1WjI5a1lqRU5NQXNHQTFVRUN3d0VWR1ZqYURFT01Bd0dBMVVFQ2d3RgpVMlZzYkhreER6QU5CZ05WQkFjTUJrUmhUbUZ1WnpFUE1BMEdBMVVFQ0F3R1JHRk9ZVzVuTVFzd0NRWURWUVFHCkV3SldUakFlRncweU1qQXpNREl4TURJNE5URmFGdzB6TWpBeU1qZ3hNREk0TlRGYU1HQXhFREFPQmdOVkJBTU0KQjIxdmJtZHZaR0l4RFRBTEJnTlZCQXNNQkZSbFkyZ3hEakFNQmdOVkJBb01CVk5sYkd4NU1ROHdEUVlEVlFRSApEQVpFWVU1aGJtY3hEekFOQmdOVkJBZ01Ca1JoVG1GdVp6RUxNQWtHQTFVRUJoTUNWazR3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNUOUhYeE5PQUNNUjhpWS9OV0w4M2xrVG9oUGtlaTBsQjUKaWI1VGVOeFdjUjJET0t5RUxjM1VMT211c1NWcDB3d3VKenV3K2dQQUx5R1YzOG9sa3UxVzJwTkhkekpSblU1VgpGUjZDS0pMdFhoVXAzbG43bEJJc0RNWE1TOE4rV2ZxR2xVaC8zdlRCWGlUcWtqUXdlaExSdjdCeEhxRWVOWUlSClFhQmZsSHl5RGYvNC9sN0JJMHU3YWlqS3RuakR4a2l2MHIxbnlIVW01d0dublY3Q09mb3FoT1FCMzFOYmNDT0cKY1ZDYzd2S0Yra0UxVGpJVDBTWDBDVGxOM1FDWG5aN0wyanZTL29LZytFd1VaMU9hVGZ3enZLcnZOUkhwTzFkZgp0UnordUVCdnduVFNkNHhSMmNtNjc2UWhmZnFkdlluakY3R1A3NjlKa281akdFR2d6NWJQQWdNQkFBR2pVekJSCk1CMEdBMVVkRGdRV0JCU1RXaXlGS05mb2g2WFdheFo3cklpNy9kclVwakFmQmdOVkhTTUVHREFXZ0JTVFdpeUYKS05mb2g2WFdheFo3cklpNy9kclVwakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBU2d5OVg0LzZZMnZjMlo3QlZkL05DQXpzSCsvVkxhMlZwaWhERXJLQ0lPNEMwY1p4NnhXR2I5eko1CktINGgwZnhwaU5KRXluRmgyUVVEZFhaMDQydDJuVWNVRUwvWG15NkZvS1ZDNlpiSHFiYm1mUUZwVlZDNWRyb1cKVXJDdUdaZ014eUl0V3hrVGpCb3RqL1Vad242TXp1RHhBaGQ0QXEvTlJFQWJpTXBNMHdoOVFiQ05TRDJMWWJFUQpjZUJGSFVIUFBVVkdiS21lbnNaaCt4aDgrOTBvNmRodFVidWNOYnRxQXdqeWdjNVFvSE11blJFSWlENUdNT2hVClVHNjdpK0lZL2lBbHF3UElQbEdMeE5mVWQrUjBpOHRQS3RhQ3lEOUhMSlljanU5THltZUljM2RTMGN4bnZxamMKeExkQVBWOTYxdmlhRFljM2FXbFZOSWdVT3dLZAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"
//    val certificateFilePassword = "xwkyhvbzoelujtqgvhytufdwdorhaxkx"
//    val dataSource: MongoSource = MongoSource(
//      orgId = 1L,
//      id = 1,
//      displayName = "test",
//      host = "localhost",
//      port = Some("27017"),
//      username = "myUserAdmin",
//      password = "abc123",
//      tlsConfiguration = Some(TLSConfiguration(certificateKeyFileData = certificateFileData, certificateKeyFilePassword = certificateFilePassword, caFileData = caFileData)),
//    )
//    val sourceHandler: SourceMetadataHandler = SourceMetadataHandler(dataSource)
//    val connected = Await.result(sourceHandler.testConnection())
//    println(connected)
//  }
}
