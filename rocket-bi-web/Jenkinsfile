pipeline {
  agent any

  options {
    gitLabConnection('gitlab_connection')
  }

  environment {
    DOCKER_REGISTRY_HOST = 'https://registry.gitlab.com'
    DOCKER_REGISTRY_CREDENTIAL = 'acc_nkt165'
    IMAGE_NAME = 'registry.gitlab.com/datainsider/rocketbi_v2/rocket-bi-web'
  }

  stages {
    stage(test) {
      steps {
        gitlabCommitStatus('test') {
          echo 'testing...'
          sh 'yarn install --frozen-lockfile && yarn test'
        }
      }
    }
    stage('deploy') {
      when {
        anyOf {
          expression { BRANCH_NAME ==~ /(dev|main|v[\d\.+]+)/ }
          buildingTag()
        }
      }

      steps {
        gitlabCommitStatus('build') {
          script {
            echo "building docker image from branch ${BRANCH_NAME}..."
            docker.withRegistry(DOCKER_REGISTRY_HOST, DOCKER_REGISTRY_CREDENTIAL) {
              def image = docker.build("$IMAGE_NAME:$BRANCH_NAME")
              image.push()
            }
          }
        }
      }
    }


    stage('deploy oss') {
      when {
        branch 'oss'
      }

      steps {
        gitlabCommitStatus('deploy') {
          sshagent(credentials: ['admin_didev']) {
            sh '''
                  ssh -o StrictHostKeyChecking=no admin@localhost "
                    cd /home/admin/data/rocket-bi
                    git checkout dev && git pull || { exit 1; }

                    cd rocket-bi-web
                    git pull gitlab oss || { exit 1; }
                    cd ..

                    git add . && git commit -m '[BOT] Update rocket-bi-web: merge from datainsider oss' && git push
                    exit 0
                  "
              '''
          }
        }
      }
    }

  }

  post {
    success {
      slackSend(
        color: 'good',
        message: "The pipeline ${currentBuild.fullDisplayName} completed successfully."
      )
    }
    failure {
      slackSend(
        color: 'danger',
        message: "The pipeline ${currentBuild.fullDisplayName} failed. Build URL: ${BUILD_URL}"
      )
    }
  }
}
